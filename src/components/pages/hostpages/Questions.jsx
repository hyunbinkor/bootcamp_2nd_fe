import React, { useState, useHistory } from 'react';
import Layout from '../../common/Layout';
import Modal from '../../atom/Modal';

const Questions = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false); // ÏÇ¨Ïö©ÏûêÏùò Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú
  const [hasTree, setHasTree] = useState(false); // Ìä∏Î¶¨ Î≥¥Ïú† Ïó¨Î∂Ä
  const [currentIndex, setCurrentIndex] = useState(0); //ÏßàÎ¨∏ index
  const [answers, setAnswers] = useState({
    //ÎãµÎ≥Ä
    ok: '',
    nickName: '',
    color: '',
    url: ''
  });
  const inputFieldNames = ['ok', 'nickName', 'color', 'url'];
  const [showModal, setShowModal] = useState(false);
  const questions = [
    'Ìä∏Î¶¨Î•º ÎßåÎì§Í∏∞ Ï†ÑÏóê Î™á Í∞ÄÏßÄ ÏßàÎ¨∏Ïóê ÎåÄÎãµÌï¥Ï§òüòÉ',
    'ÎÑàÎ•º Î∂ÄÎ•¥Îäî Î≥ÑÎ™ÖÏùÑ ÏïåÎ†§Ï§ò!',
    'ÎÑàÎäî Ïñ¥Îñ§ ÏÉâÍπîÏùÑ Ï¢ãÏïÑÌï¥? üé®',
    'Ìä∏Î¶¨ Ïù¥Î¶ÑÏùÑ ÏßÄÏñ¥Ï§ò! üéÑ'
  ];
  //   const history = useHistory();

  // ÌéòÏù¥ÏßÄÍ∞Ä Î°úÎìúÎê† Îïå ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§Îäî API Ìò∏Ï∂ú
  //   useEffect(() => {
  //     axios
  //       .get('/api/user/info')
  //       .then((response) => {
  //         const userInfo = response.data;
  //         setIsLoggedIn(userInfo.isLoggedIn);
  //         setHasTree(userInfo.hasTree);
  //       })
  //       .catch((error) => {
  //         console.error(error);
  //       });
  //   }, []);

  //  // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú Î∞è Ìä∏Î¶¨ Î≥¥Ïú† Ïó¨Î∂ÄÏóê Îî∞Îùº ÌéòÏù¥ÏßÄ Ïù¥Îèô
  //   useEffect(() => {
  //     if (!isLoggedIn) {
  //       history.push('/home'); // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÍ∞Ä ÏïÑÎãå Í≤ΩÏö∞ ÌôàÏúºÎ°ú Ïù¥Îèô
  //     } else if (isLoggedIn && !hasTree) {
  //       history.push('/host/tree'); // Î°úÍ∑∏Ïù∏ÏùÄ ÎêòÏñ¥ ÏûàÏßÄÎßå Ìä∏Î¶¨Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ Ìä∏Î¶¨ Ìò∏Ïä§ÌåÖ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
  //     }
  //   }, [isLoggedIn, hasTree, history]);

  // input ÎãµÎ≥ÄÏ∞Ω
  const handleInputChange = (e, fieldName) => {
    const { value } = e.target;
    setAnswers((prevAnswers) => ({
      ...prevAnswers,
      [fieldName]: value
    }));
  };

  // button ÎãµÎ≥Ä
  const handleButtonClick = (answer) => {
    setAnswers((prevAnswers) => ({
      ...prevAnswers,
      [inputFieldNames[currentIndex]]: answer
    }));
  };

  // Í∞Å ÏßàÎ¨∏ÎßàÎã§ Îã§Ïùå Î≤ÑÌäºÏùÑ ÎàåÎ†ÄÏùÑ Îïå
  const handleNextClick = () => {
    if (currentIndex < questions.length - 1) {
      setCurrentIndex(currentIndex + 1);
    }
  };

  // Í∞Å ÏßàÎ¨∏ÎßàÎã§ Ïù¥Ï†Ñ Î≤ÑÌäºÏùÑ ÎàåÎ†ÄÏùÑ Îïå
  const handlePrevClick = () => {
    if (currentIndex > 0) {
      setCurrentIndex(currentIndex - 1);
    }
  };

  // ÎßàÏßÄÎßâ ÏßàÎ¨∏ÏóêÏÑú ÏôÑÎ£å Î≤ÑÌäºÏùÑ ÎàåÎ†ÄÏùÑ Îïå
  const handleCompleteClick = () => {
    setShowModal(true);
  };

  // Î™®Îã¨Ï∞ΩÏóêÏÑú Îã´Í∏∞ Î≤ÑÌäºÏùÑ ÎàåÎ†ÄÏùÑ Îïå
  const handleModalClose = () => {
    setShowModal(false);
  };

  // Î™®Îã¨Ï∞ΩÏóêÏÑú ÏôÑÎ£å Î≤ÑÌäºÏùÑ ÎàåÎ†ÄÏùÑÎïå
  // **to do: post ÏöîÏ≤≠ Ï∂îÍ∞Ä ÌïÑÏöî
  const handleModalComplete = () => {
    console.log('Answers:', answers);
    setShowModal(false);
  };

  // Î™®Îì† ÎãµÎ≥ÄÏù¥ ÏûÖÎ†•ÎêòÏóàÎäîÏßÄ ÌôïÏù∏ÌïòÎäî Ìï®Ïàò
  const isAnswerEntered = (index) => {
    return answers[inputFieldNames[index]] !== '';
  };

  return (
    <Layout>
      <div className="min-h-screen pl-5 pt-20 pr-5 py-px_15 relative">
        <div className="text-black py-px_120 pl-5 text-xl font-bold">
          {questions[currentIndex]}
        </div>
        <div className="flex justify-center">
          {currentIndex === 1 || currentIndex === 3 ? (
            <input
              type="text"
              value={answers[inputFieldNames[currentIndex]]}
              onChange={(e) =>
                handleInputChange(e, inputFieldNames[currentIndex])
              }
              className="border-b border-gray-500 text-black bg-white px-3 py-2 mt-40 align-center text-center outline-none"
            />
          ) : (
            <div className="flex justify-center">
              {currentIndex === 0 ? (
                <div className="flex flex-col max-w-full gap-4 mt-16">
                  <button
                    className="bg-blue-500 text-white px-32 py-4 max-w-full rounded-md"
                    onClick={() => handleButtonClick('Ïùë')}
                  >
                    Ïùë
                  </button>
                  <button
                    className="bg-green-500 text-white px-32 py-4 rounded-md"
                    onClick={() => handleButtonClick('ÏïÑÎãàÏò§')}
                  >
                    Í∑∏Îûò
                  </button>
                </div>
              ) : currentIndex === 2 ? (
                <div className="flex flex-col max-w-full gap-4 mt-16">
                  <button
                    className="bg-blue-500 text-white px-32 py-4 max-w-full rounded-md"
                    onClick={() => handleButtonClick('Blue')}
                  >
                    Blue
                  </button>
                  <button
                    className="bg-green-500 text-white px-32 py-4 rounded-md"
                    onClick={() => handleButtonClick('Green')}
                  >
                    Green
                  </button>
                  <button
                    className="bg-yellow-500 text-white px-32 py-4 rounded-md"
                    onClick={() => handleButtonClick('Yellow')}
                  >
                    Yellow
                  </button>
                </div>
              ) : (
                <div className="flex gap-4 mt-10">
                  <button
                    className="bg-blue-500 text-white px-4 py-2 rounded-md"
                    onClick={() => handleButtonClick('Blue')}
                  >
                    Blue
                  </button>
                  <button
                    className="bg-green-500 text-white px-4 py-2 rounded-md"
                    onClick={() => handleButtonClick('Green')}
                  >
                    Green
                  </button>
                  <button
                    className="bg-yellow-500 text-white px-4 py-2 rounded-md"
                    onClick={() => handleButtonClick('Yellow')}
                  >
                    Yellow
                  </button>
                </div>
              )}
            </div>
          )}
        </div>

        <div className="text-black">
          <div className="absolute bottom-12 left-1/2 transform -translate-x-1/2 mt-20 px-8">
            {currentIndex + 1} / {questions.length}
          </div>
          {currentIndex > 0 && (
            <div
              className="absolute bottom-12 left-0 mt-3 px-8 line-height-8 cursor-pointer"
              onClick={handlePrevClick}
            >
              &larr; Ïù¥Ï†Ñ
            </div>
          )}
          {currentIndex === questions.length - 1 && (
            <div
              className={`absolute bottom-12 right-0 mt-3 px-8 line-height-8 cursor-pointer ${
                isAnswerEntered(currentIndex)
                  ? ''
                  : 'pointer-events-none text-gray-400'
              }`}
              onClick={
                isAnswerEntered(currentIndex) ? handleCompleteClick : undefined
              }
            >
              ÏôÑÎ£å
            </div>
          )}
          {currentIndex !== questions.length - 1 && (
            <div
              className={`absolute bottom-12 right-0 mt-3 px-8 line-height-8 cursor-pointer ${
                isAnswerEntered(currentIndex)
                  ? ''
                  : 'pointer-events-none text-gray-400'
              }`}
              onClick={
                isAnswerEntered(currentIndex) ? handleNextClick : undefined
              }
            >
              Îã§Ïùå &rarr;
            </div>
          )}
        </div>

        {showModal && (
          <Modal
            message="ÏûëÏÑ±ÌïòÏã† ÎÇ¥Ïö©ÏùÄ ÏàòÏ†ïÏù¥ Ïñ¥Î†§ÏõåÏöî. Ïã†Ï§ëÌïòÍ≤å ÏûëÏÑ±Ìï¥ Ï£ºÏÑ∏Ïöî!"
            onClose={handleModalClose}
            onComplete={handleModalComplete}
          />
        )}
      </div>
    </Layout>
  );
};

export default Questions;
